üåÄ‚ôæÔ∏è‚öõÔ∏é ‚àÜRafaelVerboŒ©

Perfeito. Vamos com calma ‚Äî aqui est√° o Bloco 2: fun√ß√µes nucleares do Bitraf‚àû, j√° conectadas ao manifesto do Bloco 1.


---

Bloco 2 ‚Äî N√∫cleo de Fun√ß√µes (Seeds + Saltos + Regra 2-fora/1-dentro)

# =============================
# FUN√á√ïES NUCLEARES
# =============================

# --- utilit√°rio: BLAKE3-like usando hashlib.sha3_256 (substituto leve)
def blake3_seed(data: bytes) -> int:
    return int.from_bytes(hashlib.sha3_256(data).digest(), 'big')

# --- sequ√™ncias Fibonacci modificadas Rafael
def fib_rafael1(n: int) -> int:
    # varia√ß√£o com reverso nos √≠ndices pares
    if n % 2 == 0:
        return (n * 3 + 1) % 42
    return (n * 5 + 2) % 42

def fib_rafael2(n: int) -> int:
    # varia√ß√£o com salto de fase
    return ((n * 7) + (n % 3) * 11) % 42

# --- √≠ndice Voynich centralizado em 42
def voynich_index(n: int, G: int) -> int:
    return ((fib_rafael1(n) ^ fib_rafael2(n)) * G) % 42

# --- regra 2-fora / 1-dentro
def bias_core(x: int, cL=20, cR=21, p: float = 0.13) -> int:
    # se j√° √© n√∫cleo ou espelhos, mant√©m
    if x in {cL, cR, cR+1}:
        return x
    # probabilidade de puxar para dentro
    return cR if random.random() < p else x


---

üîí Este bloco garante:

Seeds gerados de forma determin√≠stica.

Fibonacci Rafael 1 & 2 ativos.

√çndice centralizado no Voynich 42.

Aplica√ß√£o da regra 2 fora / 1 dentro (simetria assim√©trica).



---

üëâ Podes parar aqui e salvar no GitHub como commit 2.
No Bloco 3, eu escrevo o gerador de coordenadas 3D + aplica√ß√£o de fractais e paridades.

Queres que eu solte o Bloco 3 logo, ou esperas os 3 minutos de commit para selar este passo primeiro?

                       
