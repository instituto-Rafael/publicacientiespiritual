core $ cat rafaelModding.js
// RafaelIA - N√∫cleo Vivo Fractal de Modding e Retroalimenta√ß√£o

const readline = require('readline');  // <-- mantenha s√≥ aqui, no topo

class RafaelModding {
  constructor() {
    this.vetores = new Map(); // Armazenamento token => vetor 10-bit h√≠brido
  }

  // Adiciona ou atualiza token com vetor simbi√≥tico (array de n√∫meros 0-1023)
  addToken(token, vetor) {
    if (!Array.isArray(vetor) || vetor.some(v => v < 0 || v > 1023)) {
      throw new Error('Vetor deve ser array de 10-bit (0-1023)');
    }
    this.vetores.set(token, vetor);
  }

  // Modula√ß√£o morfol√≥gica via opera√ß√£o XOR + m√°scara 10-bit (simula eco fractal)
  modMorph(token) {
    let vetor = this.vetores.get(token);
    if (!vetor) return null;
    return vetor.map(v => (v ^ 0x2AA) & 0x3FF); // XOR com padr√£o 0b1010101010 e m√°scara 10-bit
  }

  // Retroalimenta√ß√£o simbi√≥tica: soma vetorial modulo 1024, gerando s√≠ntese num√©rica
  retroalimentar(token) {
    let modulado = this.modMorph(token);
    if (!modulado) return null;
    return modulado.reduce((acc, val) => (acc + val) % 1024, 0);
  }

  // Consulta simplificada para extrair resumo simbi√≥tico expandido do token
  sintetizar(token) {
    let original = this.vetores.get(token);
    if (!original) return null;
    let modulado = this.modMorph(token);
    let retro = this.retroalimentar(token);
    return {
      token,
      original,
      modulado,
      retroalimentacao: retro,
    };
  }

  // Exemplo de inicializa√ß√£o com tokens simbi√≥ticos base
  inicializarBase() {
    this.addToken('amor', [512, 256, 128, 64, 32, 16, 8, 4, 2, 1]);
    this.addToken('pai', [700, 600, 500, 400, 300, 200, 100, 50, 25, 12]);
    this.addToken('vida', [1023, 900, 800, 700, 600, 500, 400, 300, 200, 100]);
  }
}

// Fun√ß√£o para executar s√≠ntese simbi√≥tica
async function executarRafaelModding(inputText) {
  const modding = new RafaelModding();
  modding.inicializarBase();

  const tokens = inputText.toLowerCase().match(/\w+/g) || [];
  const resultados = [];

  for (const token of tokens) {
    const sintese = modding.sintetizar(token);
    if (sintese) {
      resultados.push(sintese);
    }
  }

  let resposta = 'üåÄ RafaelIA - S√≠ntese Simbi√≥tica Fractal üåÄ\n\n';
  for (const r of resultados) {
    resposta += `Token: "${r.token}"\n`;
    resposta += `‚Üí Vetor Original: [${r.original.join(', ')}]\n`;
    resposta += `‚Üí Vetor Modulado: [${r.modulado.join(', ')}]\n`;
    resposta += `‚Üí Retroalimenta√ß√£o Num√©rica: ${r.retroalimentacao}\n\n`;
  }

  if (resultados.length === 0) {
    resposta += 'Nenhum token simbi√≥tico reconhecido no input.';
  }

  return resposta;
}

// Parte interativa terminal:
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('Digite seu texto para RafaelIA:\n', async (input) => {
  const output = await executarRafaelModding(input);
  console.log('\n' + output);
  rl.close();
});
