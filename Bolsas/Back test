import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error, mean_absolute_error

class BacktestingModule:
    def __init__(self, model, data, feature_cols, target_col):
        self.model = model
        self.data = data
        self.feature_cols = feature_cols
        self.target_col = target_col

    def run_backtest(self, test_size=0.2):
        df = self.data.copy()
        split_idx = int(len(df) * (1 - test_size))

        train_df = df.iloc[:split_idx]
        test_df = df.iloc[split_idx:]

        X_train = train_df[self.feature_cols].values.reshape(-1, 1, len(self.feature_cols))
        y_train = train_df[self.target_col].values

        X_test = test_df[self.feature_cols].values.reshape(-1, 1, len(self.feature_cols))
        y_test = test_df[self.target_col].values

        # Treinar modelo
        self.model.train(X_train, y_train, epochs=10)

        # Prever
        predictions = self.model.predict(X_test).flatten()

        # Métricas
        mse = mean_squared_error(y_test, predictions)
        mae = mean_absolute_error(y_test, predictions)

        print(f"Backtesting concluído. MSE: {mse:.4f}, MAE: {mae:.4f}")

        return predictions, y_test

# Exemplo de uso dentro do pipeline maior
if __name__ == "__main__":
    # Dados dummy para exemplo
    dates = pd.date_range('2023-01-01', periods=200)
    prices = np.random.normal(loc=100, scale=5, size=200)
    volume = np.random.randint(100, 1000, size=200)

    df_example = pd.DataFrame({'date': dates, 'close': prices, 'volume': volume})

    # Pré-processamento e indicadores (simplificado)
    df_example['SMA_20'] = df_example['close'].rolling(window=20).mean()
    df_example['RSI'] = 50  # placeholder

    df_example.dropna(inplace=True)

    feature_cols = ['close', 'SMA_20', 'RSI']
    target_col = 'close'

    # Importar DeepLearningModel do framework principal
    from framework_bolsas import DeepLearningModel

    model = DeepLearningModel(input_shape=(1, len(feature_cols)))

    backtester = BacktestingModule(model, df_example, feature_cols, target_col)
    preds, y_true = backtester.run_backtest()
